#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Fail on use of unset variables.
set -u

BUILD_DIR=$1
CACHE_DIR=$2
BP_DIR="$(cd $(dirname $0); cd ..; pwd)"

echo "-----> jq version: $($BP_DIR/vendor/jq --version)"

if [ ! -f "$BUILD_DIR/package.json" ]; then
    echo "-----> No package.json found"
    exit 1
fi

# Look in package.json's engines.node field for a semver range
SEMVER_RANGE="$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.node)"
NPM_SEMVER_RANGE=$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.npm)
YARN_SEMVER_RANGE=$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.yarn)

set +e
test ! -z "$YARN_SEMVER_RANGE" -a "$YARN_SEMVER_RANGE" != "null"
USE_YARN=$?
set -e

# Look in package.json's engines.node field for the vr-build script
VR_BUILD_SCRIPT="$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r '.scripts."vr-build"')"

# Resolve Node.js version using semver.io
NODE_VERSION="$(curl --silent --get --data-urlencode "range=${SEMVER_RANGE}" http://semver.io/node/resolve)"

# Run the vr-build npm script.
puts-step "Running the 'vr-build' npm script with Node.js"

if [ -z "$VR_BUILD_SCRIPT" ] || [ "$VR_BUILD_SCRIPT" == "null" ]; then
    echo "-----> No 'vr-build' npm script found in the package.json (see https://docs.npmjs.com/misc/scripts)"
    exit 1
else
    echo "-----> Found package.json & the vr-build npm script"

    # Install node.
    echo "-----> Installing Node.js (version $NODE_VERSION)"
    NODE_URL="https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"
    echo "-----> Node.js url is $NODE_URL"
    curl $NODE_URL -s -o - | tar xzf - -C $BUILD_DIR
    echo "-----> Node.js untar"
    mkdir -p $BUILD_DIR/vendor
    mv $BUILD_DIR/node-v$NODE_VERSION-linux-x64 $BUILD_DIR/vendor/node
    chmod +x $BUILD_DIR/vendor/node/bin/*
    echo "-----> Node.js unpacked in the bin folder2
    PATH=$BUILD_DIR/vendor/node/bin:$PATH
    
    # When using Yarn we only restore its cache but not node_modules; Yarn uses its local
    # cache and doesn't connect to the internet in such a case anyway and it's quite fast
    # but at the same time it's more stable to have fresh node_modules copy in every build.
    # We're not copying the cache as it can be large but instead use it directly.
    if [ ! $USE_YARN -eq 0 ]; then
        # If node_modules directory is checked into source control then
        # rebuild any native deps. Otherwise, restore from the build cache.
        if [ -d "$BUILD_DIR/node_modules" ]; then
            status "Found existing node_modules directory; skipping cache"
            status "Rebuilding any native dependencies"
            npm rebuild 2>&1 | indent
        elif [ -d "$CACHE_DIR/node_modules" ]; then
            status "Restoring node_modules directory from cache"
            cp -r $CACHE_DIR/node_modules $BUILD_DIR/
        fi
    fi

    if [ $USE_YARN -eq 0 ]; then
        # Resolve Yarn version using semver.io
        YARN_VERSION="$(curl --silent --get --data-urlencode "range=${YARN_SEMVER_RANGE}" http://semver.io/yarn/resolve)"
        echo "-----> Installing Yarn (version $YARN_VERSION)"
        YARN_URL="https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"
        mkdir -p $BUILD_DIR/vendor/yarn
        curl $YARN_URL -s -L -o - | tar xzf - -C $BUILD_DIR/vendor/yarn
        export PATH=$BUILD_DIR/vendor/yarn/yarn-v$YARN_VERSION/bin:$PATH

        status "Setting Yarn cache location"
        rm -rf "$CACHE_DIR/node_modules"
        mkdir -p "$CACHE_DIR/yarn-cache"
        yarn config set cache-folder "$CACHE_DIR/yarn-cache"
    elif [ ! -z "$NPM_SEMVER_RANGE" ] && [ "$NPM_SEMVER_RANGE" != "null" ]; then
        # Resolve npm version using semver.io
        NPM_VERSION="$(curl --silent --get --data-urlencode "range=${NPM_SEMVER_RANGE}" http://semver.io/npm/resolve)"
        echo "-----> Installing npm (version $NPM_VERSION)"
        npm --global install npm@"$NPM_VERSION"
    fi

    if [ $USE_YARN -eq 0 ]; then
        echo "-----> Running 'yarn run vr-build'"
        yarn run vr-build
    else
        echo "-----> Running 'npm run vr-build'"
        npm run vr-build
    fi
fi

echo
